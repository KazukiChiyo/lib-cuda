/* author: Kexuan Zou
   date: 03/11/2018
*/

#include "aes.h"
#include "util.h"

static const uint8_t aes_sbox[256] = {
    0x63,0x7C,0x77,0x7B,0xF2,0x6B,0x6F,0xC5,0x30,0x01,0x67,0x2B,0xFE,0xD7,0xAB,0x76,
    0xCA,0x82,0xC9,0x7D,0xFA,0x59,0x47,0xF0,0xAD,0xD4,0xA2,0xAF,0x9C,0xA4,0x72,0xC0,
    0xB7,0xFD,0x93,0x26,0x36,0x3F,0xF7,0xCC,0x34,0xA5,0xE5,0xF1,0x71,0xD8,0x31,0x15,
    0x04,0xC7,0x23,0xC3,0x18,0x96,0x05,0x9A,0x07,0x12,0x80,0xE2,0xEB,0x27,0xB2,0x75,
    0x09,0x83,0x2C,0x1A,0x1B,0x6E,0x5A,0xA0,0x52,0x3B,0xD6,0xB3,0x29,0xE3,0x2F,0x84,
    0x53,0xD1,0x00,0xED,0x20,0xFC,0xB1,0x5B,0x6A,0xCB,0xBE,0x39,0x4A,0x4C,0x58,0xCF,
    0xD0,0xEF,0xAA,0xFB,0x43,0x4D,0x33,0x85,0x45,0xF9,0x02,0x7F,0x50,0x3C,0x9F,0xA8,
    0x51,0xA3,0x40,0x8F,0x92,0x9D,0x38,0xF5,0xBC,0xB6,0xDA,0x21,0x10,0xFF,0xF3,0xD2,
    0xCD,0x0C,0x13,0xEC,0x5F,0x97,0x44,0x17,0xC4,0xA7,0x7E,0x3D,0x64,0x5D,0x19,0x73,
    0x60,0x81,0x4F,0xDC,0x22,0x2A,0x90,0x88,0x46,0xEE,0xB8,0x14,0xDE,0x5E,0x0B,0xDB,
    0xE0,0x32,0x3A,0x0A,0x49,0x06,0x24,0x5C,0xC2,0xD3,0xAC,0x62,0x91,0x95,0xE4,0x79,
    0xE7,0xC8,0x37,0x6D,0x8D,0xD5,0x4E,0xA9,0x6C,0x56,0xF4,0xEA,0x65,0x7A,0xAE,0x08,
    0xBA,0x78,0x25,0x2E,0x1C,0xA6,0xB4,0xC6,0xE8,0xDD,0x74,0x1F,0x4B,0xBD,0x8B,0x8A,
    0x70,0x3E,0xB5,0x66,0x48,0x03,0xF6,0x0E,0x61,0x35,0x57,0xB9,0x86,0xC1,0x1D,0x9E,
    0xE1,0xF8,0x98,0x11,0x69,0xD9,0x8E,0x94,0x9B,0x1E,0x87,0xE9,0xCE,0x55,0x28,0xDF,
    0x8C,0xA1,0x89,0x0D,0xBF,0xE6,0x42,0x68,0x41,0x99,0x2D,0x0F,0xB0,0x54,0xBB,0x16};

static const uint8_t aes_invsbox[256] = {
    0x52,0x09,0x6A,0xD5,0x30,0x36,0xA5,0x38,0xBF,0x40,0xA3,0x9E,0x81,0xF3,0xD7,0xFB,
    0x7C,0xE3,0x39,0x82,0x9B,0x2F,0xFF,0x87,0x34,0x8E,0x43,0x44,0xC4,0xDE,0xE9,0xCB,
    0x54,0x7B,0x94,0x32,0xA6,0xC2,0x23,0x3D,0xEE,0x4C,0x95,0x0B,0x42,0xFA,0xC3,0x4E,
    0x08,0x2E,0xA1,0x66,0x28,0xD9,0x24,0xB2,0x76,0x5B,0xA2,0x49,0x6D,0x8B,0xD1,0x25,
    0x72,0xF8,0xF6,0x64,0x86,0x68,0x98,0x16,0xD4,0xA4,0x5C,0xCC,0x5D,0x65,0xB6,0x92,
    0x6C,0x70,0x48,0x50,0xFD,0xED,0xB9,0xDA,0x5E,0x15,0x46,0x57,0xA7,0x8D,0x9D,0x84,
    0x90,0xD8,0xAB,0x00,0x8C,0xBC,0xD3,0x0A,0xF7,0xE4,0x58,0x05,0xB8,0xB3,0x45,0x06,
    0xD0,0x2C,0x1E,0x8F,0xCA,0x3F,0x0F,0x02,0xC1,0xAF,0xBD,0x03,0x01,0x13,0x8A,0x6B,
    0x3A,0x91,0x11,0x41,0x4F,0x67,0xDC,0xEA,0x97,0xF2,0xCF,0xCE,0xF0,0xB4,0xE6,0x73,
    0x96,0xAC,0x74,0x22,0xE7,0xAD,0x35,0x85,0xE2,0xF9,0x37,0xE8,0x1C,0x75,0xDF,0x6E,
    0x47,0xF1,0x1A,0x71,0x1D,0x29,0xC5,0x89,0x6F,0xB7,0x62,0x0E,0xAA,0x18,0xBE,0x1B,
    0xFC,0x56,0x3E,0x4B,0xC6,0xD2,0x79,0x20,0x9A,0xDB,0xC0,0xFE,0x78,0xCD,0x5A,0xF4,
    0x1F,0xDD,0xA8,0x33,0x88,0x07,0xC7,0x31,0xB1,0x12,0x10,0x59,0x27,0x80,0xEC,0x5F,
    0x60,0x51,0x7F,0xA9,0x19,0xB5,0x4A,0x0D,0x2D,0xE5,0x7A,0x9F,0x93,0xC9,0x9C,0xEF,
    0xA0,0xE0,0x3B,0x4D,0xAE,0x2A,0xF5,0xB0,0xC8,0xEB,0xBB,0x3C,0x83,0x53,0x99,0x61,
    0x17,0x2B,0x04,0x7E,0xBA,0x77,0xD6,0x26,0xE1,0x69,0x14,0x63,0x55,0x21,0x0C,0x7D};

static const uint8_t Rcon[15] = {
    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d};


/**
 * sub_word - substitute a word with that in aes_sbox; used to spawn round key
 * @param word - a word represented by 4 bytes to rotate
 */
void sub_word(uint8_t* word) {
    word[0] = aes_sbox[word[0]];
    word[1] = aes_sbox[word[1]];
    word[2] = aes_sbox[word[2]];
    word[3] = aes_sbox[word[3]];
}


/**
 * rot_word - rotate a word. used to expand the key into round keys.
 * @param word - a word represented by 4 bytes to rotate
 */
void rot_word(uint8_t* word) {
    uint8_t temp = word[0];
    word[0] = word[1];
    word[1] = word[2];
    word[2] = word[3];
    word[3] = temp;
}


/**
 * key_expansion - expand the 128 bit cipher key to generate a key schedule, round key, for the following 10 rounds
 * @param key - original key
 */
void aes_128_key_expansion(uint8_t* key, uint8_t sched_key) {
    int i;
    uint8_t word[4];

    /* first round, round key is key itself */
    for (i = 0; i < AES_COLS_STATE; i++) {
        sched_key[i*AES_ROW_STATE] = key[i*AES_ROW_STATE];
        sched_key[i*AES_ROW_STATE+1] = key[i*AES_ROW_STATE+1];
        sched_key[i*AES_ROW_STATE+2] = key[i*AES_ROW_STATE+2];
        sched_key[i*AES_ROW_STATE+3] = key[i*AES_ROW_STATE+3];
    }

    /* next 10 rounds, round keys are determined from previous round keys */
    for (i = AES_COLS_STATE; i < AES_EXPD_ROUND; i++) {
        word[0] = sched_key[(i-1)*AES_ROW_STATE];
        word[1] = sched_key[(i-1)*AES_ROW_STATE+1];
        word[2] = sched_key[(i-1)*AES_ROW_STATE+2];
        word[3] = sched_key[(i-1)*AES_ROW_STATE+3];

        if (i % 4 == 0) { // for every word
            rot_word(word);
            sub_word(word);
            word[0] = word[0] ^ Rcon[i/AES_COLS_STATE];
        }
        sched_key[i*AES_ROW_STATE] = sched_key[(i-AES_KEY_ENTRIES)*4] ^ word[0];
        sched_key[i*AES_ROW_STATE+1] = sched_key[(i-AES_KEY_ENTRIES)*AES_ROW_STATE+1] ^ word[1];
        sched_key[i*AES_ROW_STATE+2] = sched_key[(i-AES_KEY_ENTRIES)*AES_ROW_STATE+2] ^ word[2];
        sched_key[i*AES_ROW_STATE+3] = sched_key[(i-AES_KEY_ENTRIES)*AES_ROW_STATE+3] ^ word[3];
    }
}


/**
 * aes_block_encryption - encrypt a single plaintext block (128 bits)
 * @param in - plaintext to encrypt
 * @param out - encrypted block
 */
__global__ void aes_128_encryption(uint8_t* buffer, uint8_t* sched_key) {
    int i, j;
    register int id = (blockDim.x*blockIdx.x + threadIdx.x)*AES_BLOCK_SIZE;
    __shared__ uint8_t sbox_share[256]; // shared sbox among threads on the device
    __shared__ uint8_t sched_key_share[AES_SCHED_SIZE]; // schedule key shared among threads on the device
    if (threadIdx.x == 0) { // for each thread with id 0, copy sbox and schedule key
        for (i = 0; i < 256; i++)
            sbox_share[i] = aes_sbox[i];
        for (i = 0; i < AES_SCHED_SIZE; i++)
            sched_key_share[i] = sched_key[i];
    }
    __syncthreads(); // sync all threads
    register uint8_t state[AES_BLOCK_SIZE]; // state of the encrypted text in each round
    for (i = 0; i < AES_BLOCK_SIZE; i++)
        state[i] = buffer[id + i];

    /* first round, state is equal to key */
    add_round_key(state, sched_key_share, 0);

    /* next 9 rounds to transform state with corresponding scheduled keys */
    for (i = 1; i < AES_NUM_ROUND; i++) {
        sub_bytes(state, sbox_share);
        shift_rows(state);
        mix_columns(state);
        add_round_key(state, sched_key_share, i);
    }

    /* last round, no need to mix columns of the state */
    sub_bytes(state, sbox_share);
    shift_rows(state);
    add_round_key(state, sched_key_share, AES_NUM_ROUND);

    /* output encrypted block */
    for (i = 0; i < AES_BLOCK_SIZE; i++)
        buffer[id + i] = state[i];
}


/**
 * aes_block_decryption - decrypt a single encrypted block (128 bit)
 * @param in - encrypted block
 * @param out - decrypted plaintext
 */
__global__ void aes_128_decryption(uint8_t* buffer, uint8_t* sched_key) {
    int i, j;
    register int id = (blockDim.x*blockIdx.x + threadIdx.x)*AES_BLOCK_SIZE;
    __shared__ uint8_t invsbox_share[256]; // shared sbox among threads on the device
    __shared__ uint8_t sched_key_share[AES_SCHED_SIZE]; // schedule key shared among threads on the device
    if (threadIdx.x == 0) { // for each thread with id 0, copy inverse sbox and schedule key
        for (i = 0; i < 256; i++)
            invsbox_share[i] = aes_invsbox[i];
        for (i = 0; i < AES_SCHED_SIZE; i++)
            sched_key_share[i] = sched_key[i];
    }
    __syncthreads(); // sync all threads
    register uint8_t state[AES_BLOCK_SIZE]; // state of the decrypted text in each round
    for (i = 0; i < AES_BLOCK_SIZE; i++)
        state[i] = buffer[id + i];

    /* add round key for first round */
    add_round_key(state, sched_key_share, AES_NUM_ROUND);
    inv_shift_rows(state);
    inv_sub_bytes(state, invsbox_share);

    /* next 9 rounds to transform state with corresponding scheduled keys */
    for (i = AES_NUM_ROUND - 1; i > 0; i--) {
        add_round_key(state, sched_key_share, i);
        inv_mix_columns(state);
        inv_shift_rows(state);
        inv_sub_bytes(state, invsbox_share);
    }
    add_round_key(state, sched_key_share, 0);

    /* output decrypted block */
    for (i = 0; i < AES_BLOCK_SIZE; i++)
        buffer[id + i] = state[i];
}
